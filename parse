#!/usr/bin/env python

import json
import unicodecsv
import os
import optparse, sys

"""Converts a datapackage JSON file plus CSV file to JSON as if it were served from the CKAN data store API"""

def nameid(row):
    row["id"] = row["name"]
    return row

def fields(fields_data):
    return list(map(lambda x: nameid(x), fields_data))

def convert(dirname, datapackage, resource_name):
    """Provide a datapackage JSON file and (optionally) specify the resource name"""
    dp_f = open(os.path.join(dirname, datapackage), "r")
    dp_d = json.load(dp_f)
    
    out = {
        "help": "",
        "success": True,
        "result": {
            "resource_id": resource_name
        },
        "records": []
    }
    for resource in dp_d["resources"]:
        if resource["name"] == resource_name:
            out["result"]["fields"] = fields(resource["schema"]["fields"])
            
            csv_f = open(os.path.join(dirname, resource["path"]), "r")
            csv_d = unicodecsv.DictReader(csv_f)
            for row in csv_d:
                out["records"].append(row)
                
    return json.dumps(out, indent=2)
    
def _convert(options):
    print convert(options.dir_path, 
                  options.datapackage_path, 
                  options.resource_name)

commands = {
    "convert": (_convert, "Convert data"),
}

def main():
    p = optparse.OptionParser()

    for k, v in commands.iteritems():
        handler, help_text = v
        option_name = "--" + k.replace("_", "-")
        p.add_option(option_name, dest=k, action="store_true", default=False, help=help_text)
    
    p.add_option("--resource-name", dest="resource_name",
         help="Specify resource name within datapackage")
    p.add_option("--dir-path", dest="dir_path",
         help="Set directory path for datapackage files")
    p.add_option("--datapackage-path", dest="datapackage_path",
         help="Set path of datapackage.json, within dir-path")

    options, args = p.parse_args()

    for mode, handler_ in commands.iteritems():
        handler, _ = handler_
        if getattr(options, mode, None):
            handler(options)
            return
    
    usage()

def usage():
    print "You need to specify which mode to run under"
    sys.exit(1)

if __name__ == '__main__':
    main()